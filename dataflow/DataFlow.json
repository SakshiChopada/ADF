{
	"name": "DataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "sales",
						"type": "DatasetReference"
					},
					"name": "sales"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "JoinCustomerswithSales",
					"description": "Inner join on 'customers' and 'sales' to know customers who has sales and its details"
				},
				{
					"name": "selectRequiredColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as integer,",
				"          customer_name as string,",
				"          location as string,",
				"          signup_date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"source(output(",
				"          sale_id as integer,",
				"          customer_id as integer,",
				"          product as string,",
				"          amount as float,",
				"          sale_datetime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sales",
				"customers, sales join(customers@customer_id == sales@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustomerswithSales",
				"JoinCustomerswithSales select(mapColumn(",
				"          customer_id = customers@customer_id,",
				"          customer_name,",
				"          location,",
				"          signup_date,",
				"          sale_id,",
				"          customer_id = sales@customer_id,",
				"          product,",
				"          amount,",
				"          sale_datetime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
				"selectRequiredColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink"
			]
		}
	}
}